#!/usr/bin/env perl

#
# Installation requirements
#   perl-Redis
#   perl-Time-HiRes
#   perl-Data-Faker
#

use strict;
use warnings;
use Redis;
use Getopt::Long;
use Data::Faker;
use Pod::Usage qw(pod2usage);
use Date;

my $size = 1000;
my $tag = '';
my $type = 'hset';
my $batch = 50;
my $starttime;
my $endtime;
my $help = 0;
my $uri = '127.0.0.1:6379';

GetOptions (
  'uri:s' => \$uri,
  'size:i' => \$size,
  'tag:s' => \$tag,
  'type:s' => \$type,
  'batch:i' => \$batch,
  'help' => \$help,
) or die "Invalid options passed to $0\n";

pod2usage(-exitval=>0, -verbose=>2) if $help;

sub getstarttime {
  $starttime = Time::HiRes::gettimeofday();
}

sub getendtime {
  $endtime = Time::HiRes::gettimeofday();
}

sub getelapsedtime {
  printf("Elapsed time: %.2f\n", $endtime - $starttime);
}

my $redis = Redis->new(server => $uri, no_auto_connect_on_new => 1, reconnect => 5);

my $now = Date::now();
print "$now Inserting $size records\n";

my $count = 1;

if ( $type eq 'HSET' or $type eq 'hset' )
{
  getstarttime();
  while ($count <= $size)
  {
    my $ct = sprintf("%010d",$count);
    my $faker = Data::Faker->new();
    if ( $batch gt 1 )
    {
      if ( $tag ne '')
      {
        my $now = Date::now();
        $redis->connect;
        $redis->ping || die "$now $count lost server?";
        $redis->hmset("emp:{$tag}:$ct", "name", $faker->name, "address", $faker->street_address, "city", $faker->city, sub {});
      }else{
        my $now = Date::now();
        $redis->connect;
        $redis->ping || die "$now $count lost server?";
        $redis->hmset("emp:$ct", "name", $faker->name, "address", $faker->street_address, "city", $faker->city, sub {});
      }

      my $res = $count % $batch;

      if ( $res eq 0 )
      {
        my $now = Date::now();
        $redis->ping || die "$now $count lost server?";
        $redis->wait_one_response;
      }
      
    }
    elsif ( $batch eq 1 )
    {
      if ( $tag ne '')
      {
        my $now = Date::now();
        $redis->connect;
        $redis->ping || die "$now $count no server?";
        $redis->hmset("emp:{$tag}:$ct", "name", $faker->name, "address", $faker->street_address, "city", $faker->city);
	      $redis->quit;
      }else{
        my $now = Date::now();
        $redis->connect;
        $redis->ping || die "$now $count no server?";
        $redis->hmset("emp:$ct", "name", $faker->name, "address", $faker->street_address, "city", $faker->city);
	      $redis->quit;
      }
    }
    
    $count += 1;
  }
  getendtime();
  getelapsedtime();
}

__END__

=head1 NAME

redis-data-generator - A simple Redis/Valkey data generator

=head1 SYNOPSYS

redis-data-generator [options]

  Options:
    -help          Display the help message

    -uri           The URI string (default: 127.0.0.1:6379)
    -size          Number of records to generate
    -tag           The hash tag [eg key:{tag}:value]
    -type          Data type to generate [eg. HASH, STRING, etc]
    -batch         Size of records in pipeline

=head1 OPTIONS

=over 8

=item B<-help>

Display the help message and exit.

=item B<-size>

Number of records to generate.

=item B<-tag>

The hash tag to use (optional)

=item B<-type>

The data type to generate. Case-insensitive and only support HASH or hash for now.

=item B<-batch>

The nunber of records in the pipeline 

=back

=head1 DESCRIPTION

This program is a simple data generator for Redis/Valkey.

=cut